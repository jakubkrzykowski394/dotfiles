[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export EDITOR=nvim
export PATH="$HOME/config/bin:$PATH"

# # If you come from bash you might have to change your $PATH.
# # export PATH=$HOME/bin:/usr/local/bin:$PATH

# # Path to your oh-my-zsh installation.
# export ZSH="/home/schultes/.oh-my-zsh"

# # Set name of the theme to load --- if set to "random", it will
# # load a random theme each time oh-my-zsh is loaded, in which case,
# # to know which specific one was loaded, run: echo $RANDOM_THEME
# # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME=""

# source $ZSH/oh-my-zsh.sh

# # vagrant needs windows path to VirtualBox, Powershell and windows CMD tools. And shell extension for vscode needs win path for vscode as well. Apart from these exceptions, make sure to separate windows path from linux path
# export PATH="/home/schultes/.local/bin:/home/schultes/bin:/home/schultes/.bin:/mnt/c/Program Files/Oracle/VirtualBox:/mnt/c/Windows/System32/WindowsPowerShell/v1.0:/mnt/c/WINDOWS/system32:/mnt/c/Program Files/Microsoft VS Code/bin:/mnt/c/tools:$PATH"

# # zplug zsh plugin manager
# source ~/.zplug/init.zsh
# # oh-my-zsh plugins
# zplug plugins/git,   from:oh-my-zsh, defer:3
# zplug plugins/mvn,   from:oh-my-zsh
# zplug plugins/vagrant,   from:oh-my-zsh
# zplug plugins/terraform,   from:oh-my-zsh
# zplug plugins/z,   from:oh-my-zsh
# # defer means to load this plugin after all the other plugins
# zplug zdharma/fast-syntax-highlighting, defer:2
# # command auto-suggestion based on history
# zplug zsh-users/zsh-autosuggestions
# # Pure Prompt https://github.com/sindresorhus/pure
# zplug mafredri/zsh-async, from:github
# zplug sindresorhus/pure, use:pure.zsh, from:github, as:theme

# # let zplug manage itself
# zplug 'zplug/zplug', hook-build:'zplug --self-manage'

# # Install plugins if there are plugins that have not been installed
# if ! zplug check --verbose; then
#   printf "Install? [y/N]: "
#   if read -q; then
#     echo; zplug install
#   fi
# fi
# # Then, source plugins and add commands to $PATH
# zplug load

# # Configure ssh forwarding
# export SSH_AUTH_SOCK=$HOME/.ssh/agent.sock
# # need `ps -ww` to get non-truncated command for matching
# # use square brackets to generate a regex match for the process we want but that doesn't match the grep command running it!
# ALREADY_RUNNING=$(ps -auxww | grep -q "[n]piperelay.exe -ei -s //./pipe/openssh-ssh-agent"; echo $?)
# if [[ $ALREADY_RUNNING != "0" ]]; then
#     if [[ -S $SSH_AUTH_SOCK ]]; then
#         # not expecting the socket to exist as the forwarding command isn't running (http://www.tldp.org/LDP/abs/html/fto.html)
#         echo "removing previous socket..."
#         rm $SSH_AUTH_SOCK
#     fi
#     echo "Starting SSH-Agent relay..."
#     # setsid to force new session to keep running
#     # set socat to listen on $SSH_AUTH_SOCK and forward to npiperelay which then forwards to openssh-ssh-agent on windows
#     (setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &) >/dev/null 2>&1
# fi


# # Shortcut alias for vagrant VM updates
# vs() {
#   vagrant rsync "$1" && vagrant provision "$1"
#  }

# # homebrew for linux path addition
# eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
# export HOMEBREW_FORCE_BREWED_CURL=1
# export HOMEBREW_CURLRC=1


# # fzf configuration
# [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
# alias fzf="fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'"
# export FZF_DEFAULT_OPTS='--layout=reverse'

# # replace cat with bat
# alias cat='bat'
# # use bat coloring for man pages
# export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# # repo config file for https://github.com/asottile/all-repos
# export ALL_REPOS_CONFIG_FILENAME="$HOME/.config/all-repos.json"

# # nvm/node related stuff
# export NVM_DIR="$HOME/.nvm"
# [ -s "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh" ] && \. "/home/linuxbrew/.linuxbrew/opt/nvm/nvm.sh"  # This loads nvm
# [ -s "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion


# # puppet related stuff
# export PUPPET_WORKSPACE="/home/schultes/sources/viega-webdev/globalinternet-puppet/"
# export IDM_PUPPET_WORKSPACE="/home/schultes/sources/viega-webdev/idm-puppet/"
# export CI_CHAIN_PUPPET_WORKSPACE="/home/schultes/sources/viega-webdev/ci-chain-puppet/"
# export INTRANETAPPS_PUPPET_WORKSPACE="/home/schultes/sources/viega-webdev/intranetapps-puppet/"
# export WORKFLOWS_PUPPET_WORKSPACE="/home/schultes/sources/viega-webdev/workflows-puppet/"
# # make sure ruby uses global trust store
# export SSL_CERT_FILE="/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
# # make sure curl uses global trust store
# export CURL_CA_BUNDLE="/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
# # make sure AIO uses global trust store
# export NODE_EXTRA_CA_CERTS="/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"

# # pin the used vagrantfile and enable windows interop without any
# # export VAGRANT_DEFAULT_PROVIDER="hyperv"
# export VAGRANT_DEFAULT_PROVIDER="virtualbox"
# export VAGRANT_CWD="/mnt/c/Users/stefa/sources/development-vms/vagrant"
# export VAGRANT_WSL_ENABLE_WINDOWS_ACCESS="1"
# export VAGRANT_WSL_WINDOWS_ACCESS_USER_HOME_PATH="/mnt/c/Users/stefa/sources"


# #export PDK_PUPPET_VERSION=6
# #alias librarian-puppet='pdk bundle exec librarian-puppet'
# #alias eyaml='pdk bundle exec eyaml'
# alias packer.io='/usr/bin/packer'



# #THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
# export SDKMAN_DIR="$HOME/.sdkman"
# [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
