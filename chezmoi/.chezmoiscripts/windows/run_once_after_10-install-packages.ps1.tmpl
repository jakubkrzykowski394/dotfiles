{{- if eq .chezmoi.os "windows" -}}

# Self-elevate the script if required
if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
    $CommandLine = "-File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath PowerShell.exe -Verb Runas -ArgumentList $CommandLine
    Exit
  }
}

$hereString = @"
# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2

properties:
  resources:
    - resource: Microsoft.Windows.Developer/DeveloperMode
      id: Enable
      directives:
        description: Enable Developer Mode
        allowPrerelease: true
      settings:
        Ensure: Present
    - resource: Microsoft.Windows.Developer/WindowsExplorer
      directives:
        description: Windows Explorer settings
        allowPrerelease: true
      settings:
        FileExtensions: Show # [KeepCurrentValue, Hide]
        HiddenFiles: Show # [KeepCurrentValue, Hide]
        ItemCheckBoxes: Show # [KeepCurrentValue, Hide]
        RestartExplorer: # Use caution when setting `RestartExplorer: true` as this will force explorer to close. Required for all WindowsExplorer settings.
    - resource: Microsoft.Windows.Developer/EnableDarkMode
      directives:
        description: Enable dark mode
        allowPrerelease: true
      settings:
        Ensure: Present
        # Use caution when setting `RestartExplorer: true` as this will force explorer to close.
        RestartExplorer: true # Required to apply changes



    # Installing packages
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Git
      directives:
        description: Install Git
        allowPrerelease: true
      settings:
        id: Git.Git
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Powershell
      directives:
        description: Install up-to-date Powershell version
        allowPrerelease: true
      settings:
        id: Microsoft.PowerShell
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: OhMyPosh
      directives:
        description: Install powershell prompt git support
        allowPrerelease: true
      settings:
        id: JanDeDobbeleer.OhMyPosh
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: WSL Ubuntu 24.04 LTS
      directives:
        description: Install Ubuntu 24.04 LTS
        allowPrerelease: true
      settings:
        id: 9NZ3KLHXDJP5
        source: msstore
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Visual Studio Code
      directives:
        description: Install Visual Studio Code
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudioCode
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Docker for Desktop
      directives:
        description: Install Docker for Desktop
        allowPrerelease: true
      settings:
        id: Docker.DockerDesktop
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: MS Terminal
      directives:
        description: Install MS Terminal
        allowPrerelease: true
      settings:
        id: Microsoft.WindowsTerminal
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: MS PowerToys
      directives:
        description: Install PowerToys
        allowPrerelease: true
      settings:
        id: Microsoft.PowerToys
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: 1password Client
      directives:
        description: Install 1password client
        allowPrerelease: true
      settings:
        id: AgileBits.1Password
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: 1password CLI
      directives:
        description: Install 1password CLI
        allowPrerelease: true
      settings:
        id: AgileBits.1Password.CLI
        source: winget




    # Non-work provided machine
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: MS Company Portal
      directives:
        description: Install MS Company Portal
        allowPrerelease: true
      settings:
        id: 9WZDNCRFJ3PZ
        source: msstore
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: MS Teams
      directives:
        description: Install MS Teams
        allowPrerelease: true
      settings:
        id:  Microsoft.Teams
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: MS Office
      directives:
        description: Install MS Office Enterprise
        allowPrerelease: true
      settings:
        id:  Microsoft.Office
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: MS OneDrive
      directives:
        description: Install MS OneDrive
        allowPrerelease: true
      settings:
        id:  Microsoft.OneDrive
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Git LFS
      directives:
        description: Install Git LFS
        allowPrerelease: true
      settings:
        id:  GitHub.GitLFS
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: GitHub CLI
      directives:
        description: Install GitHub CLI
        allowPrerelease: true
      settings:
        id:  GitHub.cli
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: MS Storage Explorer
      directives:
        description: Install MS Azure Storage Explorer
        allowPrerelease: true
      settings:
        id:  Microsoft.Azure.StorageExplorer
        source: winget

    # Installing personal packages
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Brave browser
      directives:
        description: Install Brave browser
        allowPrerelease: true
      settings:
        id: Brave.Brave
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Obsidian
      directives:
        description: Install Obsidian
        allowPrerelease: true
      settings:
        id: Obsidian.Obsidian
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Discord
      directives:
        description: Install Discord
        allowPrerelease: true
      settings:
        id: Discord.Discord
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Slack
      directives:
        description: Install Slack
        allowPrerelease: true
      settings:
        id: SlackTechnologies.Slack
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Spotify
      directives:
        description: Install Spotify
        allowPrerelease: true
      settings:
        id: Spotify.Spotify
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Steam
      directives:
        description: Install Steam
        allowPrerelease: true
      settings:
        id:  Valve.Steam
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Firefox Dev Edition
      directives:
        description: Install Firefox Developer Edition
        allowPrerelease: true
      settings:
        id:  Mozilla.Firefox.DeveloperEdition
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: MS Edge browser
      directives:
        description: Install Microsoft Edge browser
        allowPrerelease: true
      settings:
        id:  Microsoft.Edge
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Jellyfin player
      directives:
        description: Install Jellyfin player
        allowPrerelease: true
      settings:
        id:  Jellyfin.JellyfinMediaPlayer
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Bruno
      directives:
        description: Install Bruno API client
        allowPrerelease: true
      settings:
        id:  Bruno.Bruno
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Komorebi
      directives:
        description: Install Komorebi - tiling window manager for Windows
        allowPrerelease: true
      settings:
        id:  LGUG2Z.komorebi
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: WHKD
      directives:
        description: Install WHKD - windows hotkey daemon
        allowPrerelease: true
      settings:
        id:  LGUG2Z.whkd
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Snagit 2022
      directives:
        description: Install Snagit2022 snipping tool
        allowPrerelease: true
      settings:
        id:  TechSmith.Snagit.2022
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: VLC
      directives:
        description: Install VLC media player
        allowPrerelease: true
      settings:
        id:  VideoLAN.VLC
        source: winget
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Wireshark
      directives:
        description: Install Wireshark
        allowPrerelease: true
      settings:
        id:  WiresharkFoundation.Wireshark
        source: winget

  configurationVersion: 0.2.0
"@

# Function to create a temporary file
function New-TemporaryFile {
    $tempFile = [System.IO.Path]::GetTempFileName()
    return $tempFile
}

# Create a temporary file
$tempFile = New-TemporaryFile

# Write the content to the temporary file
$hereString | Out-File -FilePath $tempFile -Encoding utf8

# Run winget configure with the temporary file
winget configure -f $tempFile --accept-configuration-agreements

# Clean up the temporary file
Remove-Item $tempFile

# Update the path after package installation, since we want to use the new binaries
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")


{{ end -}}
