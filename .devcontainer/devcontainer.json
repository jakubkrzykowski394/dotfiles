// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/ubuntu
{
  "name": "Packer",
  // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
  "build": { "dockerfile": "Dockerfile" },

  // Features to add to the dev container. More info: https://containers.dev/features.
  "features": {
    // Enable docker-in-docker for debugging GitHub Actions and building Dockerfile images in the devcontainer
    // TODO: move this into the dockerfile to get rid of features altogether
    "ghcr.io/devcontainers/features/docker-in-docker:2": {}
    //"ghcr.io/devcontainers/features/docker-outside-of-docker:1": {}
  },

  // Required for docker-outside-of-docker feature
  //"remoteEnv": { "LOCAL_WORKSPACE_FOLDER": "${localWorkspaceFolder}" },
  //"workspaceFolder": "${localWorkspaceFolder}",
  //"workspaceMount": "source=${localWorkspaceFolder},target=${localWorkspaceFolder},type=bind",

  // Use 'forwardPorts' to make a list of ports inside the container available locally.
  // "forwardPorts": [],


  // "initializeCommand": "",

  // Use 'postCreateCommand' to run commands after the container is created.
  // TODO: move this into resource shell scripts for interactive and non-interactive (CI) use
  "postCreateCommand": {
    "Install ansible collections": "ansible-galaxy collection install -r requirements.yml",
    "Install pinned packer version": "sudo apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt-get install packer=$(cat .packer-version)* -y --allow-downgrades"
  },

  // When starting a devcontainer from windows OS directly, the git executable is set to a windows path. This setting gets copied into
  // the devcontainer and causes git to fail. This command unsets the git config setting on each container start.
  // TODO: move this into resource shell scripts for interactive and non-interactive (CI) use
  "postStartCommand": {
    "Setup git config": "if git config --global --get core.sshcommand > /dev/null; then git config --global --unset core.sshcommand; fi && git config --global --add safe.directory ${containerWorkspaceFolder}",
    "Install pre-commit hooks": "pre-commit install"
  },


  // Configure tool-specific properties.
  "customizations": {
    // Configure properties specific to VS Code.
    "vscode": {
      // Add the IDs of extensions you want installed when the container is created.
      // TODO: add an extension pack definition to host in github? Is local sourcing of extension pack definitions possible? we will want to use the same plugins almost everywhere.
      "extensions": [
        "ms-azuretools.vscode-docker",
        "redhat.vscode-yaml",
        "rogalmic.bash-debug",
        "timonwong.shellcheck",
        "jasonnutter.vscode-codeowners",
        "EditorConfig.EditorConfig",
        "GitHub.vscode-pull-request-github",
        "bierner.markdown-preview-github-styles",
        "DavidAnson.vscode-markdownlint",
        "Gruntfuggly.todo-tree",
        "nefrob.vscode-just-syntax",
        "stateful.runme",
        "esbenp.prettier-vscode",
        "github.vscode-github-actions",
        "eamodio.gitlens",
        "bungcip.better-toml",
        "atlassian.atlascode",
        "redhat.ansible",
        "HashiCorp.HCL",
        "dotenv.dotenv-vscode",
        "Gerrnperl.outline-map"
      ]
    }
  }

  // TODO: persist user home for configs(?), caches and shell history etc. Consider CI usage
  // below doesn't work yet
  // "mounts": [
  //       "source=profile,target=/home/vscode,type=volume",
  //       "target=/home/vscode/.vscode-server,type=volume"
  // ]

  // Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
  // "remoteUser": "root"
}
